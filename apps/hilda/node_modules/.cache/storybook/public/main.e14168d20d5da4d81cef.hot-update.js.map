{"version":3,"file":"main.e14168d20d5da4d81cef.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;;AACA;;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AADA;AAGA;;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAaA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AAQA;AARA;AAYA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AASA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAFA;AAKA;;;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://hilda/./src/stories/table.stories.mdx","webpack://hilda/./src/ sync ^\\.("],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story } from '@storybook/addon-docs'\nimport { UITable } from './index'\n<Meta title=\"Select\" component={Select} />\nexport const Template = args => <UITable {...args} mdxType=\"UITable\" />;\n\nconst layoutProps = {\n  Template\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    {\n      /* TestComponent.stories.mdx*/\n    }\n\n\n    {\n      /* üëá We create a ‚Äútemplate‚Äù of how args map to rendering */\n    }\n\n    {\n      /* üëá Each story then reuses that template */\n    }\n    <Story name=\"Options Icon\" args={{\n      columns: [{\n        internalName: 'nome',\n        label: 'Nome'\n      }],\n      data: [{\n        nome: 'Gabi'\n      }]\n    }} mdxType=\"Story\">\n  {Template.bind({})}\n    </Story>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const optionsIcon = Template.bind({});\noptionsIcon.storyName = 'Options Icon';\noptionsIcon.args = {\n  columns: [{\n    internalName: 'nome',\n    label: 'Nome'\n  }],\n  data: [{\n    nome: 'Gabi'\n  }]\n};\noptionsIcon.parameters = { storySource: { source: 'args => <UITable {...args} />' } };\n\nconst componentMeta = { includeStories: [\"optionsIcon\"],  };\n\nconst mdxStoryNameToKey = {\"Options Icon\":\"optionsIcon\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","var map = {\n\t\"./stories/Introduction.stories.mdx\": \"./src/stories/Introduction.stories.mdx\",\n\t\"./stories/table.stories.mdx\": \"./src/stories/table.stories.mdx\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src sync recursive ^\\\\.(?:(?:^%7C[\\\\\\\\/]%7C(?:(?:(?%21(?:^%7C[\\\\\\\\/])\\\\.).)*?)[\\\\\\\\/])(?%21\\\\.)(?=.)[^\\\\\\\\/]*?\\\\.stories\\\\.mdx)$\";"],"names":[],"sourceRoot":""}